// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*!
 * @file PerformanceHeader.cpp
 * This source file contains the definition of the described types in the IDL file.
 *
 * This file was generated by the tool gen.
 */

#ifdef _WIN32
// Remove linker warning LNK4221 on Visual Studio
namespace { char dummy; }
#endif

#include "PerformanceHeader.h"
#include <fastcdr/Cdr.h>

#include <fastcdr/exceptions/BadParamException.h>
using namespace eprosima::fastcdr::exception;

#include <utility>

PerformanceHeader::PerformanceHeader()
{
    // m_sec com.eprosima.idl.parser.typecode.PrimitiveTypeCode@4eb7f003
    m_sec = 0;
    // m_nanosec com.eprosima.idl.parser.typecode.PrimitiveTypeCode@eafc191
    m_nanosec = 0;
    // m_tracking_number com.eprosima.idl.parser.typecode.PrimitiveTypeCode@612fc6eb
    m_tracking_number = 0;
    // m_frequency com.eprosima.idl.parser.typecode.PrimitiveTypeCode@1060b431
    m_frequency = 0.0;
    // m_size com.eprosima.idl.parser.typecode.PrimitiveTypeCode@612679d6
    m_size = 0;

}

PerformanceHeader::~PerformanceHeader()
{





}

PerformanceHeader::PerformanceHeader(const PerformanceHeader &x)
{
    m_sec = x.m_sec;
    m_nanosec = x.m_nanosec;
    m_tracking_number = x.m_tracking_number;
    m_frequency = x.m_frequency;
    m_size = x.m_size;
}

PerformanceHeader::PerformanceHeader(PerformanceHeader &&x)
{
    m_sec = x.m_sec;
    m_nanosec = x.m_nanosec;
    m_tracking_number = x.m_tracking_number;
    m_frequency = x.m_frequency;
    m_size = x.m_size;
}

PerformanceHeader& PerformanceHeader::operator=(const PerformanceHeader &x)
{

    m_sec = x.m_sec;
    m_nanosec = x.m_nanosec;
    m_tracking_number = x.m_tracking_number;
    m_frequency = x.m_frequency;
    m_size = x.m_size;

    return *this;
}

PerformanceHeader& PerformanceHeader::operator=(PerformanceHeader &&x)
{

    m_sec = x.m_sec;
    m_nanosec = x.m_nanosec;
    m_tracking_number = x.m_tracking_number;
    m_frequency = x.m_frequency;
    m_size = x.m_size;

    return *this;
}

size_t PerformanceHeader::getMaxCdrSerializedSize(size_t current_alignment)
{
    size_t initial_alignment = current_alignment;


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);



    return current_alignment - initial_alignment;
}

size_t PerformanceHeader::getCdrSerializedSize(const PerformanceHeader& data, size_t current_alignment)
{
    (void)data;
    size_t initial_alignment = current_alignment;


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);



    return current_alignment - initial_alignment;
}

void PerformanceHeader::serialize(eprosima::fastcdr::Cdr &scdr) const
{

    scdr << m_sec;
    scdr << m_nanosec;
    scdr << m_tracking_number;
    scdr << m_frequency;
    scdr << m_size;
}

void PerformanceHeader::deserialize(eprosima::fastcdr::Cdr &dcdr)
{

    dcdr >> m_sec;
    dcdr >> m_nanosec;
    dcdr >> m_tracking_number;
    dcdr >> m_frequency;
    dcdr >> m_size;
}

/*!
 * @brief This function sets a value in member sec
 * @param _sec New value for member sec
 */
void PerformanceHeader::sec(int32_t _sec)
{
m_sec = _sec;
}

/*!
 * @brief This function returns the value of member sec
 * @return Value of member sec
 */
int32_t PerformanceHeader::sec() const
{
    return m_sec;
}

/*!
 * @brief This function returns a reference to member sec
 * @return Reference to member sec
 */
int32_t& PerformanceHeader::sec()
{
    return m_sec;
}

/*!
 * @brief This function sets a value in member nanosec
 * @param _nanosec New value for member nanosec
 */
void PerformanceHeader::nanosec(uint32_t _nanosec)
{
m_nanosec = _nanosec;
}

/*!
 * @brief This function returns the value of member nanosec
 * @return Value of member nanosec
 */
uint32_t PerformanceHeader::nanosec() const
{
    return m_nanosec;
}

/*!
 * @brief This function returns a reference to member nanosec
 * @return Reference to member nanosec
 */
uint32_t& PerformanceHeader::nanosec()
{
    return m_nanosec;
}

/*!
 * @brief This function sets a value in member tracking_number
 * @param _tracking_number New value for member tracking_number
 */
void PerformanceHeader::tracking_number(uint32_t _tracking_number)
{
m_tracking_number = _tracking_number;
}

/*!
 * @brief This function returns the value of member tracking_number
 * @return Value of member tracking_number
 */
uint32_t PerformanceHeader::tracking_number() const
{
    return m_tracking_number;
}

/*!
 * @brief This function returns a reference to member tracking_number
 * @return Reference to member tracking_number
 */
uint32_t& PerformanceHeader::tracking_number()
{
    return m_tracking_number;
}

/*!
 * @brief This function sets a value in member frequency
 * @param _frequency New value for member frequency
 */
void PerformanceHeader::frequency(float _frequency)
{
m_frequency = _frequency;
}

/*!
 * @brief This function returns the value of member frequency
 * @return Value of member frequency
 */
float PerformanceHeader::frequency() const
{
    return m_frequency;
}

/*!
 * @brief This function returns a reference to member frequency
 * @return Reference to member frequency
 */
float& PerformanceHeader::frequency()
{
    return m_frequency;
}

/*!
 * @brief This function sets a value in member size
 * @param _size New value for member size
 */
void PerformanceHeader::size(uint32_t _size)
{
m_size = _size;
}

/*!
 * @brief This function returns the value of member size
 * @return Value of member size
 */
uint32_t PerformanceHeader::size() const
{
    return m_size;
}

/*!
 * @brief This function returns a reference to member size
 * @return Reference to member size
 */
uint32_t& PerformanceHeader::size()
{
    return m_size;
}


size_t PerformanceHeader::getKeyMaxCdrSerializedSize(size_t current_alignment)
{
    size_t current_align = current_alignment;








    return current_align;
}

bool PerformanceHeader::isKeyDefined()
{
   return false;
}

void PerformanceHeader::serializeKey(eprosima::fastcdr::Cdr &scdr) const
{
    (void) scdr;
     
     
     
     
     
}
