// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*!
 * @file PerformanceHeader.h
 * This header file contains the declaration of the described types in the IDL file.
 *
 * This file was generated by the tool gen.
 */

#ifndef _PERFORMANCEHEADER_H_
#define _PERFORMANCEHEADER_H_

// TODO Poner en el contexto.

#include <stdint.h>
#include <array>
#include <string>
#include <vector>
#include <map>
#include <bitset>

#if defined(_WIN32)
#if defined(EPROSIMA_USER_DLL_EXPORT)
#define eProsima_user_DllExport __declspec( dllexport )
#else
#define eProsima_user_DllExport
#endif
#else
#define eProsima_user_DllExport
#endif

#if defined(_WIN32)
#if defined(EPROSIMA_USER_DLL_EXPORT)
#if defined(PerformanceHeader_SOURCE)
#define PerformanceHeader_DllAPI __declspec( dllexport )
#else
#define PerformanceHeader_DllAPI __declspec( dllimport )
#endif // PerformanceHeader_SOURCE
#else
#define PerformanceHeader_DllAPI
#endif
#else
#define PerformanceHeader_DllAPI
#endif // _WIN32

namespace eprosima
{
    namespace fastcdr
    {
        class Cdr;
    }
}


/*!
 * @brief This class represents the structure PerformanceHeader defined by the user in the IDL file.
 * @ingroup PERFORMANCEHEADER
 */
class PerformanceHeader
{
public:

    /*!
     * @brief Default constructor.
     */
    eProsima_user_DllExport PerformanceHeader();

    /*!
     * @brief Default destructor.
     */
    eProsima_user_DllExport ~PerformanceHeader();

    /*!
     * @brief Copy constructor.
     * @param x Reference to the object PerformanceHeader that will be copied.
     */
    eProsima_user_DllExport PerformanceHeader(const PerformanceHeader &x);

    /*!
     * @brief Move constructor.
     * @param x Reference to the object PerformanceHeader that will be copied.
     */
    eProsima_user_DllExport PerformanceHeader(PerformanceHeader &&x);

    /*!
     * @brief Copy assignment.
     * @param x Reference to the object PerformanceHeader that will be copied.
     */
    eProsima_user_DllExport PerformanceHeader& operator=(const PerformanceHeader &x);

    /*!
     * @brief Move assignment.
     * @param x Reference to the object PerformanceHeader that will be copied.
     */
    eProsima_user_DllExport PerformanceHeader& operator=(PerformanceHeader &&x);

    /*!
     * @brief This function sets a value in member sec
     * @param _sec New value for member sec
     */
    eProsima_user_DllExport void sec(int32_t _sec);

    /*!
     * @brief This function returns the value of member sec
     * @return Value of member sec
     */
    eProsima_user_DllExport int32_t sec() const;

    /*!
     * @brief This function returns a reference to member sec
     * @return Reference to member sec
     */
    eProsima_user_DllExport int32_t& sec();

    /*!
     * @brief This function sets a value in member nanosec
     * @param _nanosec New value for member nanosec
     */
    eProsima_user_DllExport void nanosec(uint32_t _nanosec);

    /*!
     * @brief This function returns the value of member nanosec
     * @return Value of member nanosec
     */
    eProsima_user_DllExport uint32_t nanosec() const;

    /*!
     * @brief This function returns a reference to member nanosec
     * @return Reference to member nanosec
     */
    eProsima_user_DllExport uint32_t& nanosec();

    /*!
     * @brief This function sets a value in member tracking_number
     * @param _tracking_number New value for member tracking_number
     */
    eProsima_user_DllExport void tracking_number(uint32_t _tracking_number);

    /*!
     * @brief This function returns the value of member tracking_number
     * @return Value of member tracking_number
     */
    eProsima_user_DllExport uint32_t tracking_number() const;

    /*!
     * @brief This function returns a reference to member tracking_number
     * @return Reference to member tracking_number
     */
    eProsima_user_DllExport uint32_t& tracking_number();

    /*!
     * @brief This function sets a value in member frequency
     * @param _frequency New value for member frequency
     */
    eProsima_user_DllExport void frequency(float _frequency);

    /*!
     * @brief This function returns the value of member frequency
     * @return Value of member frequency
     */
    eProsima_user_DllExport float frequency() const;

    /*!
     * @brief This function returns a reference to member frequency
     * @return Reference to member frequency
     */
    eProsima_user_DllExport float& frequency();

    /*!
     * @brief This function sets a value in member size
     * @param _size New value for member size
     */
    eProsima_user_DllExport void size(uint32_t _size);

    /*!
     * @brief This function returns the value of member size
     * @return Value of member size
     */
    eProsima_user_DllExport uint32_t size() const;

    /*!
     * @brief This function returns a reference to member size
     * @return Reference to member size
     */
    eProsima_user_DllExport uint32_t& size();


    /*!
     * @brief This function returns the maximum serialized size of an object
     * depending on the buffer alignment.
     * @param current_alignment Buffer alignment.
     * @return Maximum serialized size.
     */
    eProsima_user_DllExport static size_t getMaxCdrSerializedSize(size_t current_alignment = 0);

    /*!
     * @brief This function returns the serialized size of a data depending on the buffer alignment.
     * @param data Data which is calculated its serialized size.
     * @param current_alignment Buffer alignment.
     * @return Serialized size.
     */
    eProsima_user_DllExport static size_t getCdrSerializedSize(const PerformanceHeader& data, size_t current_alignment = 0);


    /*!
     * @brief This function serializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void serialize(eprosima::fastcdr::Cdr &cdr) const;

    /*!
     * @brief This function deserializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void deserialize(eprosima::fastcdr::Cdr &cdr);



    /*!
     * @brief This function returns the maximum serialized size of the Key of an object
     * depending on the buffer alignment.
     * @param current_alignment Buffer alignment.
     * @return Maximum serialized size.
     */
    eProsima_user_DllExport static size_t getKeyMaxCdrSerializedSize(size_t current_alignment = 0);

    /*!
     * @brief This function tells you if the Key has been defined for this type
     */
    eProsima_user_DllExport static bool isKeyDefined();

    /*!
     * @brief This function serializes the key members of an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void serializeKey(eprosima::fastcdr::Cdr &cdr) const;

private:
    int32_t m_sec;
    uint32_t m_nanosec;
    uint32_t m_tracking_number;
    float m_frequency;
    uint32_t m_size;
};

#endif // _PERFORMANCEHEADER_H_