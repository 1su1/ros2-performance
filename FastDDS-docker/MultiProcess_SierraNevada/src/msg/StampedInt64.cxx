// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*!
 * @file StampedInt64.cpp
 * This source file contains the definition of the described types in the IDL file.
 *
 * This file was generated by the tool gen.
 */

#ifdef _WIN32
// Remove linker warning LNK4221 on Visual Studio
namespace { char dummy; }
#endif

#include "StampedInt64.h"
#include <fastcdr/Cdr.h>

#include <fastcdr/exceptions/BadParamException.h>
using namespace eprosima::fastcdr::exception;

#include <utility>

StampedInt64::StampedInt64()
{
    // m_header com.eprosima.fastdds.idl.parser.typecode.StructTypeCode@53ca01a2

    // m_data com.eprosima.idl.parser.typecode.PrimitiveTypeCode@358c99f5
    m_data = 0;

}

StampedInt64::~StampedInt64()
{


}

StampedInt64::StampedInt64(const StampedInt64 &x)
{
    m_header = x.m_header;
    m_data = x.m_data;
}

StampedInt64::StampedInt64(StampedInt64 &&x)
{
    m_header = std::move(x.m_header);
    m_data = x.m_data;
}

StampedInt64& StampedInt64::operator=(const StampedInt64 &x)
{

    m_header = x.m_header;
    m_data = x.m_data;

    return *this;
}

StampedInt64& StampedInt64::operator=(StampedInt64 &&x)
{

    m_header = std::move(x.m_header);
    m_data = x.m_data;

    return *this;
}

size_t StampedInt64::getMaxCdrSerializedSize(size_t current_alignment)
{
    size_t initial_alignment = current_alignment;


    current_alignment += PerformanceHeader::getMaxCdrSerializedSize(current_alignment);
    current_alignment += 8 + eprosima::fastcdr::Cdr::alignment(current_alignment, 8);



    return current_alignment - initial_alignment;
}

size_t StampedInt64::getCdrSerializedSize(const StampedInt64& data, size_t current_alignment)
{
    (void)data;
    size_t initial_alignment = current_alignment;


    current_alignment += PerformanceHeader::getCdrSerializedSize(data.header(), current_alignment);
    current_alignment += 8 + eprosima::fastcdr::Cdr::alignment(current_alignment, 8);



    return current_alignment - initial_alignment;
}

void StampedInt64::serialize(eprosima::fastcdr::Cdr &scdr) const
{

    scdr << m_header;
    scdr << m_data;
}

void StampedInt64::deserialize(eprosima::fastcdr::Cdr &dcdr)
{

    dcdr >> m_header;
    dcdr >> m_data;
}

/*!
 * @brief This function copies the value in member header
 * @param _header New value to be copied in member header
 */
void StampedInt64::header(const PerformanceHeader &_header)
{
m_header = _header;
}

/*!
 * @brief This function moves the value in member header
 * @param _header New value to be moved in member header
 */
void StampedInt64::header(PerformanceHeader &&_header)
{
m_header = std::move(_header);
}

/*!
 * @brief This function returns a constant reference to member header
 * @return Constant reference to member header
 */
const PerformanceHeader& StampedInt64::header() const
{
    return m_header;
}

/*!
 * @brief This function returns a reference to member header
 * @return Reference to member header
 */
PerformanceHeader& StampedInt64::header()
{
    return m_header;
}
/*!
 * @brief This function sets a value in member data
 * @param _data New value for member data
 */
void StampedInt64::data(int64_t _data)
{
m_data = _data;
}

/*!
 * @brief This function returns the value of member data
 * @return Value of member data
 */
int64_t StampedInt64::data() const
{
    return m_data;
}

/*!
 * @brief This function returns a reference to member data
 * @return Reference to member data
 */
int64_t& StampedInt64::data()
{
    return m_data;
}


size_t StampedInt64::getKeyMaxCdrSerializedSize(size_t current_alignment)
{
    size_t current_align = current_alignment;





    return current_align;
}

bool StampedInt64::isKeyDefined()
{
   return false;
}

void StampedInt64::serializeKey(eprosima::fastcdr::Cdr &scdr) const
{
    (void) scdr;
     
     
}
