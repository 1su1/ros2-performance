// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*!
 * @file Stamped4Int32.cpp
 * This source file contains the definition of the described types in the IDL file.
 *
 * This file was generated by the tool gen.
 */

#ifdef _WIN32
// Remove linker warning LNK4221 on Visual Studio
namespace { char dummy; }
#endif

#include "Stamped4Int32.h"
#include <fastcdr/Cdr.h>

#include <fastcdr/exceptions/BadParamException.h>
using namespace eprosima::fastcdr::exception;

#include <utility>

Stamped4Int32::Stamped4Int32()
{
    // m_header com.eprosima.fastdds.idl.parser.typecode.StructTypeCode@6328d34a

    // m_data com.eprosima.idl.parser.typecode.ArrayTypeCode@145eaa29
    memset(&m_data, 0, (4) * 4);

}

Stamped4Int32::~Stamped4Int32()
{


}

Stamped4Int32::Stamped4Int32(const Stamped4Int32 &x)
{
    m_header = x.m_header;
    m_data = x.m_data;
}

Stamped4Int32::Stamped4Int32(Stamped4Int32 &&x)
{
    m_header = std::move(x.m_header);
    m_data = std::move(x.m_data);
}

Stamped4Int32& Stamped4Int32::operator=(const Stamped4Int32 &x)
{

    m_header = x.m_header;
    m_data = x.m_data;

    return *this;
}

Stamped4Int32& Stamped4Int32::operator=(Stamped4Int32 &&x)
{

    m_header = std::move(x.m_header);
    m_data = std::move(x.m_data);

    return *this;
}

size_t Stamped4Int32::getMaxCdrSerializedSize(size_t current_alignment)
{
    size_t initial_alignment = current_alignment;


    current_alignment += PerformanceHeader::getMaxCdrSerializedSize(current_alignment);
    current_alignment += ((4) * 4) + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);



    return current_alignment - initial_alignment;
}

size_t Stamped4Int32::getCdrSerializedSize(const Stamped4Int32& data, size_t current_alignment)
{
    (void)data;
    size_t initial_alignment = current_alignment;


    current_alignment += PerformanceHeader::getCdrSerializedSize(data.header(), current_alignment);
    if ((4) > 0)
    {
        current_alignment += ((4) * 4) + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);
    }


    return current_alignment - initial_alignment;
}

void Stamped4Int32::serialize(eprosima::fastcdr::Cdr &scdr) const
{

    scdr << m_header;
    scdr << m_data;

}

void Stamped4Int32::deserialize(eprosima::fastcdr::Cdr &dcdr)
{

    dcdr >> m_header;
    dcdr >> m_data;

}

/*!
 * @brief This function copies the value in member header
 * @param _header New value to be copied in member header
 */
void Stamped4Int32::header(const PerformanceHeader &_header)
{
m_header = _header;
}

/*!
 * @brief This function moves the value in member header
 * @param _header New value to be moved in member header
 */
void Stamped4Int32::header(PerformanceHeader &&_header)
{
m_header = std::move(_header);
}

/*!
 * @brief This function returns a constant reference to member header
 * @return Constant reference to member header
 */
const PerformanceHeader& Stamped4Int32::header() const
{
    return m_header;
}

/*!
 * @brief This function returns a reference to member header
 * @return Reference to member header
 */
PerformanceHeader& Stamped4Int32::header()
{
    return m_header;
}
/*!
 * @brief This function copies the value in member data
 * @param _data New value to be copied in member data
 */
void Stamped4Int32::data(const std::array<int32_t, 4> &_data)
{
m_data = _data;
}

/*!
 * @brief This function moves the value in member data
 * @param _data New value to be moved in member data
 */
void Stamped4Int32::data(std::array<int32_t, 4> &&_data)
{
m_data = std::move(_data);
}

/*!
 * @brief This function returns a constant reference to member data
 * @return Constant reference to member data
 */
const std::array<int32_t, 4>& Stamped4Int32::data() const
{
    return m_data;
}

/*!
 * @brief This function returns a reference to member data
 * @return Reference to member data
 */
std::array<int32_t, 4>& Stamped4Int32::data()
{
    return m_data;
}

size_t Stamped4Int32::getKeyMaxCdrSerializedSize(size_t current_alignment)
{
    size_t current_align = current_alignment;





    return current_align;
}

bool Stamped4Int32::isKeyDefined()
{
   return false;
}

void Stamped4Int32::serializeKey(eprosima::fastcdr::Cdr &scdr) const
{
    (void) scdr;
     
     
}
